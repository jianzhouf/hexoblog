<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jian Zhou’s Blog</title>
  
  <subtitle>知识在于积累</subtitle>
  <link href="/hexoblog/atom.xml" rel="self"/>
  
  <link href="https://jianzhouf.github.io/hexoblog/"/>
  <updated>2019-05-29T09:22:13.000Z</updated>
  <id>https://jianzhouf.github.io/hexoblog/</id>
  
  <author>
    <name>周健</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ios兼容问题</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/05/29/iosfix/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/05/29/iosfix/</id>
    <published>2019-05-29T09:16:07.000Z</published>
    <updated>2019-05-29T09:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ios-混合webview-兼容问题"><a href="#ios-混合webview-兼容问题" class="headerlink" title="ios 混合webview 兼容问题"></a>ios 混合webview 兼容问题</h1><h2 id="ios键盘收起导致页面上移"><a href="#ios键盘收起导致页面上移" class="headerlink" title="ios键盘收起导致页面上移"></a>ios键盘收起导致页面上移</h2><p>产生原因： 为了用户体验，<code>input</code>聚焦时，使得<code>body</code>的<code>scrollTop</code>加上了键盘的高度，导致页面上移；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (device.ios()) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">"focusin"</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">"focusout"</span>, (e) =&gt; &#123;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      e.target.scrollIntoView()</span><br><span class="line">    &#125;, <span class="number">200</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ios-混合webview-兼容问题&quot;&gt;&lt;a href=&quot;#ios-混合webview-兼容问题&quot; class=&quot;headerlink&quot; title=&quot;ios 混合webview 兼容问题&quot;&gt;&lt;/a&gt;ios 混合webview 兼容问题&lt;/h1&gt;&lt;h2 id=&quot;i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端遮罩层问题</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/05/21/mask/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/05/21/mask/</id>
    <published>2019-05-21T09:17:34.000Z</published>
    <updated>2019-05-22T01:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端遮罩层问题"><a href="#移动端遮罩层问题" class="headerlink" title="移动端遮罩层问题"></a>移动端遮罩层问题</h1><h2 id="移动端-ios-safari"><a href="#移动端-ios-safari" class="headerlink" title="移动端 ios safari"></a>移动端 ios safari</h2><a id="more"></a><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p><code>body</code>加上<code>overflow:hidden</code>.<br>PC可以实现<br>问题：<br>在移动端 会有<code>滚动穿透</code>问题<br>定义：移动端弹出fixed弹窗的话，在弹窗上滑动会导致下层的页面跟着滚动，这个叫 “滚动穿透”</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p><code>body</code>加上 <code>position:fixed</code><br>解决了<code>滚动穿透</code>问题<br>新的问题：<br>滚动位置丢失！页面会回到顶部！<br>修复方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下vue 的代码实现 通过 遮罩层的显示隐藏 切换body 的样式 </span></span><br><span class="line"> watch: &#123;</span><br><span class="line">    visible: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.top =</span><br><span class="line">        <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">        <span class="built_in">document</span>.body.style.position = <span class="string">"fixed"</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.style.top = -<span class="keyword">this</span>.top + <span class="string">"px"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.style.position = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollTop = <span class="built_in">document</span>.body.scrollTop = <span class="keyword">this</span>.top;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 注意： 由于fixed 的改变了body的样式 ， 请加上 body&#123;width: 100%&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;移动端遮罩层问题&quot;&gt;&lt;a href=&quot;#移动端遮罩层问题&quot; class=&quot;headerlink&quot; title=&quot;移动端遮罩层问题&quot;&gt;&lt;/a&gt;移动端遮罩层问题&lt;/h1&gt;&lt;h2 id=&quot;移动端-ios-safari&quot;&gt;&lt;a href=&quot;#移动端-ios-safari&quot; class=&quot;headerlink&quot; title=&quot;移动端 ios safari&quot;&gt;&lt;/a&gt;移动端 ios safari&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>优秀的三方库收集</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/05/09/lib/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/05/09/lib/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-05-09T06:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">html2canvas</a></h2><ul><li>可做截屏功能</li><li>可做某个片段／图片的 特效功能，例如 google 灭霸特效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(<span class="built_in">document</span>.body).then(<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="chance"><a href="#chance" class="headerlink" title="chance"></a><a href="https://github.com/chancejs/chancejs" target="_blank" rel="noopener">chance</a></h2><ul><li>随机字符串，数字等的极简主义生成器</li><li>编写自动化测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chance.string()</span><br><span class="line">chance.integer(&#123; <span class="attr">min</span>: <span class="number">-20</span>, <span class="attr">max</span>: <span class="number">20</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a><a href="https://lodash.com/" target="_blank" rel="noopener">Lodash</a></h2><ul><li>Lodash通过处理数组，数字，对象，字符串等麻烦使得JavaScript更容易</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html2canvas&quot;&gt;&lt;a href=&quot;#html2canvas&quot; class=&quot;headerlink&quot; title=&quot;html2canvas&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/niklasvh/html2canvas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;html2canvas&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可做截屏功能&lt;/li&gt;
&lt;li&gt;可做某个片段／图片的 特效功能，例如 google 灭霸特效&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;html2canvas(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;canvas&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-redux</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/04/11/react-redux/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/04/11/react-redux/</id>
    <published>2019-04-11T08:19:22.000Z</published>
    <updated>2019-06-18T06:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于redux"><a href="#关于redux" class="headerlink" title="关于redux"></a>关于redux</h1><h2 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h2><ol><li>单一数据源 <blockquote><p>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p></blockquote></li><li>State 是只读的 <blockquote><p>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p></blockquote></li><li>使用纯函数来执行修改 <blockquote><p>为了描述 action 如何改变 state tree ，你需要编写 reducers。</p></blockquote></li></ol><a id="more"></a><h2 id="简单的redux-实例"><a href="#简单的redux-实例" class="headerlink" title="简单的redux 实例"></a>简单的redux 实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">"ADD_TODO"</span></span><br><span class="line"><span class="comment">/*action*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*reducer*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state=&#123;index:<span class="number">1</span>&#125;, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">            <span class="keyword">return</span>  &#123;...state, <span class="attr">index</span>: state.index+<span class="number">1</span>&#125;  </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = createStore(todos)</span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    store.getState() <span class="comment">// &#123;index:2&#125;</span></span><br><span class="line">&#125;)</span><br><span class="line">store.dispatch(addTodo())</span><br></pre></td></tr></table></figure><h2 id="react-redux-异步action-实例"><a href="#react-redux-异步action-实例" class="headerlink" title="react-redux 异步action 实例"></a>react-redux 异步action 实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">"redux-thunk"</span></span><br><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">"ADD_TODO"</span></span><br><span class="line"><span class="comment">/*action*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用 thunkMiddleware 让 dispach可以识别函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncAddTodo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      dispatch(addTodo())</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*reducer*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state=&#123;index:<span class="number">1</span>&#125;, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">            <span class="keyword">return</span>  &#123;...state, <span class="attr">index</span>: state.index+<span class="number">1</span>&#125;  </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = createStore(todos,applyMiddleware(thunkMiddleware))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用react-redux</span></span><br><span class="line"><span class="comment">//入口文件，&lt;Provider&gt; 来 魔法般的 让所有容器组件都可以访问 store，而不必显示地传递它</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line">ReactDOM.render(&lt;Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/Provider&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用connect 生成容器组件 代替 store.subscribe， 这个方法做了性能优化来避免很多不必要的重复渲染</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="keyword">import</span> &#123;asyncAddTodo,addTodo&#125; <span class="keyword">from</span> <span class="string">"./index"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">state,ownProps</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"> index: state.index</span><br><span class="line">&#125;&#125;,(dispatch)=&gt;(&#123;</span><br><span class="line">  addTodo: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    dispatch(addTodo())</span><br><span class="line">  &#125;,</span><br><span class="line">  asyncAddTodo: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    dispatch(asyncAddTodo())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))(App);</span><br></pre></td></tr></table></figure><h1 id="redux-源码解析"><a href="#redux-源码解析" class="headerlink" title="redux 源码解析"></a>redux 源码解析</h1><h2 id="createStore-源码解析"><a href="#createStore-源码解析" class="headerlink" title="createStore 源码解析"></a>createStore 源码解析</h2><p><code>createStore</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer: 响应 actions 返回新的 state</span></span><br><span class="line"><span class="comment">// preloadedState: 初始state</span></span><br><span class="line"><span class="comment">// enhancer: 利用 applyMiddleware 对store 增强</span></span><br><span class="line">createStore(reducer, preloadedState, enhancer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// createStore 执行时 初始化一次state</span></span><br><span class="line">dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line"><span class="comment">//`createStore的返回值`</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 触发一个action，</span></span><br><span class="line"><span class="comment">     * 执行 currentState = currentReducer(currentState, action)，更新state</span></span><br><span class="line"><span class="comment">     * 执行所有的listeners</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    subscribe, <span class="comment">// 添加监听，状态变化时执行所有的listeners</span></span><br><span class="line">    getState, <span class="comment">// return currentState</span></span><br><span class="line">    replaceReducer, <span class="comment">// 替换成新的reducer</span></span><br><span class="line">    [$$observable]: observable <span class="comment">// 定义一个观察者对象，须有next 接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="combineReducers-源码解析"><a href="#combineReducers-源码解析" class="headerlink" title="combineReducers 源码解析"></a>combineReducers 源码解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers) <span class="comment">// 对所有的reducers key 进行收集</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// reducer的key 指向的 单独的state</span></span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 以reducer的key 存储 每一个reducer 维护的state</span></span><br><span class="line">      nextState[key] = nextStateForKey </span><br><span class="line"></span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="applyMiddleware-源码解析"><a href="#applyMiddleware-源码解析" class="headerlink" title="applyMiddleware 源码解析"></a>applyMiddleware 源码解析</h2><p>中间件 就是将 store的dispatch进行增强,使得可以接受一个函数，promise对象等，例如 <code>redux-thunk</code> 、<code>redux-promise</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供了 store 的getState 和 dispath 的方法</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// 提供一个增强的dispatch方法</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="react-redux-源码简单分析"><a href="#react-redux-源码简单分析" class="headerlink" title="react-redux 源码简单分析"></a>react-redux 源码简单分析</h1><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      store, <span class="comment">// redux 创建的 store </span></span><br><span class="line">      <span class="comment">// provider 提供的一个 可添加订阅的 方法</span></span><br><span class="line">      <span class="comment">// subscription 本身对 store.subscribe 监听 </span></span><br><span class="line">      subscription </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Context.Provider value=&#123;this.state&#125;&gt;</span><br><span class="line">      &#123;this.props.children&#125;</span><br><span class="line">    &lt;/Context.Provider&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">connectAdvanced</span>(<span class="params">selectorFactory, &#123;...&#125;</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> checkForUpdates = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="comment">// If the child props haven't changed, nothing to do here - cascade the subscription update</span></span><br><span class="line">    <span class="comment">// props 不变 </span></span><br><span class="line">    <span class="keyword">if</span> (newChildProps === lastChildProps.current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!renderIsScheduled.current) &#123;</span><br><span class="line">        notifyNestedSubs()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Save references to the new child props.  Note that we track the "child props from store update"</span></span><br><span class="line">      <span class="comment">// as a ref instead of a useState/useReducer because we need a way to determine if that value has</span></span><br><span class="line">      <span class="comment">// been processed.  If this went into useState/useReducer, we couldn't clear out the value without</span></span><br><span class="line">      <span class="comment">// forcing another re-render, which we don't want.</span></span><br><span class="line">      lastChildProps.current = newChildProps</span><br><span class="line">      childPropsFromStoreUpdate.current = newChildProps</span><br><span class="line">      renderIsScheduled.current = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render</span></span><br><span class="line">      <span class="comment">// 如果 props 改变 组件重新render</span></span><br><span class="line">      forceComponentUpdateDispatch(&#123;</span><br><span class="line">        type: <span class="string">'STORE_UPDATED'</span>,</span><br><span class="line">        payload: &#123;</span><br><span class="line">          latestStoreState,</span><br><span class="line">          error</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Actually subscribe to the nearest connected ancestor (or store)</span></span><br><span class="line">  <span class="comment">// didStoreComeFromProps ? null : contextValue.subscription context 提供的 subscription</span></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  subscription.onStateChange = checkForUpdates</span><br><span class="line">  <span class="comment">// 添加订阅</span></span><br><span class="line">  subscription.trySubscribe()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pull data from the store after first render in case the store has</span></span><br><span class="line">  <span class="comment">// changed since we began.</span></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  checkForUpdates()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于redux&quot;&gt;&lt;a href=&quot;#关于redux&quot; class=&quot;headerlink&quot; title=&quot;关于redux&quot;&gt;&lt;/a&gt;关于redux&lt;/h1&gt;&lt;h2 id=&quot;三大原则&quot;&gt;&lt;a href=&quot;#三大原则&quot; class=&quot;headerlink&quot; title=&quot;三大原则&quot;&gt;&lt;/a&gt;三大原则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;单一数据源 &lt;blockquote&gt;
&lt;p&gt;整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;State 是只读的 &lt;blockquote&gt;
&lt;p&gt;唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;使用纯函数来执行修改 &lt;blockquote&gt;
&lt;p&gt;为了描述 action 如何改变 state tree ，你需要编写 reducers。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack配置</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/03/27/webpack%E9%85%8D%E7%BD%AE/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/03/27/webpack配置/</id>
    <published>2019-03-27T05:17:46.000Z</published>
    <updated>2019-05-09T06:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录webpack 配置过程</p><h1 id="webpack-参数配置"><a href="#webpack-参数配置" class="headerlink" title="webpack 参数配置"></a>webpack 参数配置</h1><h2 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口 entry"></a>入口 entry</h2><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><blockquote><p>loader 用于对模块的源代码进行转换。类似于其他构建工具中任务(task)<br><a id="more"></a></p></blockquote><p>jsx 语法<br><code>@babel/core</code><br><code>babel-loader</code><br><code>@babel/preset-react</code> </p><p>引入antd<br>需要开启 <code>less-loader</code> <code>options: {javascriptEnabled: true}</code></p><p>箭头函数问题<br><code>transform-class-properties</code></p><p>动态导入<br><code>dynamic-import-webpack</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录webpack 配置过程&lt;/p&gt;
&lt;h1 id=&quot;webpack-参数配置&quot;&gt;&lt;a href=&quot;#webpack-参数配置&quot; class=&quot;headerlink&quot; title=&quot;webpack 参数配置&quot;&gt;&lt;/a&gt;webpack 参数配置&lt;/h1&gt;&lt;h2 id=&quot;入口-entry&quot;&gt;&lt;a href=&quot;#入口-entry&quot; class=&quot;headerlink&quot; title=&quot;入口 entry&quot;&gt;&lt;/a&gt;入口 entry&lt;/h2&gt;&lt;h2 id=&quot;loader&quot;&gt;&lt;a href=&quot;#loader&quot; class=&quot;headerlink&quot; title=&quot;loader&quot;&gt;&lt;/a&gt;loader&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;loader 用于对模块的源代码进行转换。类似于其他构建工具中任务(task)&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js继承</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/03/26/extend/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/03/26/extend/</id>
    <published>2019-03-26T14:16:41.000Z</published>
    <updated>2019-05-09T06:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>es5实现js继承的几种方式<br><a id="more"></a></p><h1 id="js继承"><a href="#js继承" class="headerlink" title="js继承"></a>js继承</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(word)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = <span class="string">"male"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类原型指向父类实例</span></span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person(<span class="string">"jack"</span>)</span><br><span class="line">Man.prototype.constructor = Man;</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man()</span><br><span class="line"><span class="built_in">console</span>.log(man.name) <span class="comment">//jack</span></span><br><span class="line"><span class="built_in">console</span>.log(man.sex) <span class="comment">//male</span></span><br><span class="line"><span class="comment">// man 的原型链上 找到 Person.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(man <span class="keyword">instanceof</span> Person) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特点</p><ol><li>实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）<br>缺点</li><li>新实例无法向父类构造函数传参</li><li>继承单一</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</li></ol><h2 id="组合继承（组合原型链继承和借用构造函数复制父类构造函数属性）（常用）"><a href="#组合继承（组合原型链继承和借用构造函数复制父类构造函数属性）（常用）" class="headerlink" title="组合继承（组合原型链继承和借用构造函数复制父类构造函数属性）（常用）"></a>组合继承（组合原型链继承和借用构造函数复制父类构造函数属性）（常用）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//复制父类构造函数的属性 </span></span><br><span class="line">    Person.call(<span class="keyword">this</span>,name);</span><br><span class="line">    <span class="keyword">this</span>.sex = <span class="string">"male"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承父类原型</span></span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Man.prototype.constructor = Man;</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man(<span class="string">"jack"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(man.name) <span class="comment">//jack</span></span><br><span class="line"><span class="built_in">console</span>.log(man.sex) <span class="comment">//male</span></span><br><span class="line"><span class="built_in">console</span>.log(man <span class="keyword">instanceof</span> Person) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特点</p><ol><li>可以继承父类原型上的属性，可以传参，可复用</li><li>每个新实例引入的构造函数属性是私有的<br>缺点</li><li>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数</li></ol><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类构造函数 复制 父类构造函数 的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>,name)</span><br><span class="line">    <span class="keyword">this</span>.sex = <span class="string">"male"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空函数F</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 把F的原型指向 父类的原型</span></span><br><span class="line">F.prototype = Person.prototype</span><br><span class="line"><span class="comment">// 让子类的原型 指向F实例 从而利用原型链 继承父类的原型</span></span><br><span class="line">Man.prototype = <span class="keyword">new</span> F()</span><br><span class="line"><span class="comment">// 把Man 原型的 构造函数 修复为 Man</span></span><br><span class="line">Man.prototype.constructor = Man</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man(<span class="string">"jack"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(man.name)</span><br><span class="line"><span class="built_in">console</span>.log(man.sex)</span><br><span class="line"><span class="built_in">console</span>.log(man <span class="keyword">instanceof</span> Man)</span><br><span class="line"><span class="built_in">console</span>.log(man <span class="keyword">instanceof</span> Person)</span><br><span class="line">man.say(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><ol><li>修复了 组合继承调用两次父类构造函数的问题</li></ol><h3 id="代码简化"><a href="#代码简化" class="headerlink" title="代码简化"></a>代码简化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(word)</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = Parent.prototype;</span><br><span class="line">    Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>,name)</span><br><span class="line">    <span class="keyword">this</span>.sex = <span class="string">"male"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现继承</span></span><br><span class="line">inherits(Man,Person)</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Man.prototype.constructor = Man</span><br></pre></td></tr></table></figure><blockquote><ol><li>由于Man的protoType被Person实例覆盖 所以Man.prototype.constructor 会指向 Person构造函数</li><li>为了防止类似 (实例)man.<strong>proto</strong>.constructor() 等显式调用 返回的错误指向问题</li></ol></blockquote><blockquote><p>The constructor property makes absolutely no practical difference to anything internally. It’s only any use if your code explicitly uses it. For example, you may decide you need each of your objects to have a reference to the actual constructor function that created it; if so, you’ll need to set the constructor property explicitly when you set up inheritance by assigning an object to a constructor function’s prototype property, as in your example.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es5实现js继承的几种方式&lt;br&gt;
    
    </summary>
    
    
      <category term="继承" scheme="https://jianzhouf.github.io/hexoblog/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="原型" scheme="https://jianzhouf.github.io/hexoblog/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Promise 异步应用</title>
    <link href="https://jianzhouf.github.io/hexoblog/2019/03/26/promise/"/>
    <id>https://jianzhouf.github.io/hexoblog/2019/03/26/promise/</id>
    <published>2019-03-26T14:11:41.000Z</published>
    <updated>2019-05-09T06:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise-异步应用"><a href="#Promise-异步应用" class="headerlink" title="Promise 异步应用"></a>Promise 异步应用</h1><h2 id="Promise-例子"><a href="#Promise-例子" class="headerlink" title="Promise 例子"></a>Promise 例子</h2><p>Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">value, time, status</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;                     <span class="comment">//用</span></span><br><span class="line">            <span class="built_in">console</span>.log(value);</span><br><span class="line">            <span class="keyword">if</span> (status) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">myPromise(<span class="number">1</span>, <span class="number">500</span>, <span class="literal">true</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myPromise(<span class="number">3</span>, <span class="number">1500</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> myPromise(<span class="number">4</span>, <span class="number">1500</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Promise原型"><a href="#Promise原型" class="headerlink" title="Promise原型"></a>Promise原型</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="Promise-prototype-catch-onRejected"><a href="#Promise-prototype-catch-onRejected" class="headerlink" title="Promise.prototype.catch(onRejected)"></a>Promise.prototype.catch(onRejected)</h4><blockquote><p>添加一个否定(rejection) 回调到当前 promise, 返回一个新的promise。如果这个回调被调用，新 promise 将以它的返回值来resolve，否则如果当前promise 进入fulfilled状态，则以当前promise的肯定结果作为新promise的肯定结果.</p></blockquote><h4 id="Promise-prototype-then-onFulfilled-onRejected"><a href="#Promise-prototype-then-onFulfilled-onRejected" class="headerlink" title="Promise.prototype.then(onFulfilled, onRejected)"></a>Promise.prototype.then(onFulfilled, onRejected)</h4><blockquote><p>添加肯定和否定回调到当前 promise, 返回一个新的 promise, 将以回调的返回值 来resolve.</p></blockquote><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><h3 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h3><table><thead><tr><th>Feature</th><th>Chrome</th><th>Edge</th><th>Firefox</th><th>Internet Explorer</th><th>Opera</th><th>Safari</th></tr></thead><tbody><tr><td>Basic Support</td><td>32.0</td><td>(Yes)</td><td>29.0</td><td>No</td><td>19</td><td>7.1</td></tr></tbody></table><h4 id="MDN快速链接-Promise"><a href="#MDN快速链接-Promise" class="headerlink" title="MDN快速链接-Promise"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">MDN快速链接-Promise</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise-异步应用&quot;&gt;&lt;a href=&quot;#Promise-异步应用&quot; class=&quot;headerlink&quot; title=&quot;Promise 异步应用&quot;&gt;&lt;/a&gt;Promise 异步应用&lt;/h1&gt;&lt;h2 id=&quot;Promise-例子&quot;&gt;&lt;a href=&quot;#Promise-例子&quot; class=&quot;headerlink&quot; title=&quot;Promise 例子&quot;&gt;&lt;/a&gt;Promise 例子&lt;/h2&gt;&lt;p&gt;Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myPromise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, time, status&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;                     &lt;span class=&quot;comment&quot;&gt;//用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                reject(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, time)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myPromise(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; myPromise(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1500&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; myPromise(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1500&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="https://jianzhouf.github.io/hexoblog/tags/ES6/"/>
    
      <category term="Promise" scheme="https://jianzhouf.github.io/hexoblog/tags/Promise/"/>
    
  </entry>
  
</feed>
